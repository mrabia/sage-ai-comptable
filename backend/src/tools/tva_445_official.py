"""
Outil officiel de calcul TVA collect√©e selon la norme comptable marocaine
M√©thode officielle : TVA collect√©e = Œ£(Cr√©dits 445) - Œ£(D√©bits 445)
JAMAIS de reconstruction HT√ótaux ni utilisation de feuilles inadapt√©es
"""

import logging
import json
import re
import unicodedata
from typing import Dict, Any, List, Optional, Union
import pandas as pd
from src.models.user import db, FileAttachment

# Try to import CrewAI tools with fallback
try:
    from crewai.tools import BaseTool
except ImportError:
    try:
        from crewai import BaseTool
    except ImportError:
        # Create a fallback BaseTool class
        class BaseTool:
            def __init__(self, **kwargs):
                for key, value in kwargs.items():
                    setattr(self, key, value)

logger = logging.getLogger(__name__)

# ---------- Utilities: normalization & detection ----------

def _slugify(s: str) -> str:
    """Normalise un en-t√™te: minuscule, sans accents, espaces -> _, supprime non-alphanum."""
    if s is None:
        return ""
    s = str(s)
    s = unicodedata.normalize("NFKD", s).encode("ascii", "ignore").decode("ascii")
    s = s.lower().strip()
    s = re.sub(r"[\s\-]+", "_", s)
    s = re.sub(r"[^a-z0-9_]", "", s)
    return s

def _normalize_columns(df: pd.DataFrame) -> pd.DataFrame:
    """Normalise les noms de colonnes pour faciliter la d√©tection"""
    out = df.copy()
    out.columns = [_slugify(c) for c in out.columns]
    return out

# Synonymes d'ent√™tes apr√®s normalisation
COL_MAP = {
    "account": ["code_compte", "compte", "compte_general", "account", "code", "code_cpte"],
    "date":    ["date_ecriture", "date", "date_valeur", "date_piece", "ecriture_date"],
    "debit":   ["debit", "mvt_debit", "montant_debit", "debit_"],
    "credit":  ["credit", "mvt_credit", "montant_credit", "credit_"],
}

def _detect_col(df: pd.DataFrame, keys: List[str]) -> Optional[str]:
    """D√©tecte une colonne parmi les synonymes possibles"""
    cols = set(df.columns)
    for k in keys:
        if k in cols:
            return k
    # fallback partiel
    for col in df.columns:
        for k in keys:
            if k in col:
                return col
    return None

def _coerce_types(df: pd.DataFrame, date_col: str, debit_col: str, credit_col: str) -> pd.DataFrame:
    """Force le typage des colonnes critiques"""
    out = df.copy()
    if date_col in out.columns:
        out[date_col] = pd.to_datetime(out[date_col], errors="coerce")
    if debit_col in out.columns:
        out[debit_col] = pd.to_numeric(out[debit_col], errors="coerce").fillna(0.0)
    if credit_col in out.columns:
        out[credit_col] = pd.to_numeric(out[credit_col], errors="coerce").fillna(0.0)
    return out

def _filter_period(df: pd.DataFrame, date_col: str, start_dt: pd.Timestamp, end_dt: pd.Timestamp) -> pd.DataFrame:
    """Filtre les donn√©es sur la p√©riode sp√©cifi√©e (bornes inclusives)"""
    m = (df[date_col] >= start_dt) & (df[date_col] <= end_dt)
    return df.loc[m].copy()

def _is_tva_account_series(s: pd.Series) -> pd.Series:
    """V√©rifie si les comptes commencent par 445 (comptes TVA collect√©e)"""
    return s.astype(str).str.strip().str.startswith("445")

class TVACollecteeOfficialTool(BaseTool):
    """Outil officiel pour calculer la TVA collect√©e selon la norme comptable"""
    
    name: str = "tva_collectee_officielle"
    description: str = """
    Calcule la TVA collect√©e OFFICIELLE selon la norme comptable marocaine.
    
    R√àGLE D'OR NON N√âGOCIABLE:
    TVA collect√©e = Œ£(Cr√©dits 445) - Œ£(D√©bits 445) sur la p√©riode demand√©e.
    
    INTERDICTIONS ABSOLUES:
    - Jamais d'estimation HT/TVA/TTC depuis feuille 'banque' 
    - Jamais d'application de taux fixe (20%, 14%, etc.)
    - Jamais d'utilisation du grand livre complet sans filtrage 445
    
    Param√®tres:
    - document_id: ID du fichier Excel contenant le grand livre
    - start_date: Date de d√©but (YYYY-MM-DD)
    - end_date: Date de fin (YYYY-MM-DD) 
    - limit_sheets: Feuilles sp√©cifiques √† analyser (optionnel)
    
    Retourne un rapport officiel avec TVA nette, d√©tail par compte 445.
    """
    
    def _run(self, document_id: int, start_date: str = "2025-05-01", end_date: str = "2025-05-31", limit_sheets: str = None) -> str:
        try:
            print(f"üîç TVACollecteeOfficialTool: Calculing OFFICIAL TVA for file ID {document_id}")
            print(f"üìÖ P√©riode: {start_date} ‚Üí {end_date}")
            
            # R√©cup√©rer le fichier attach√©
            file_attachment = FileAttachment.query.get(document_id)
            if not file_attachment:
                return f"‚ùå Fichier {document_id} non trouv√©"
            
            print(f"‚úÖ Found file: {file_attachment.original_filename}")
            
            if file_attachment.file_extension.lower() not in ['.xlsx', '.xls']:
                return f"‚ùå Le fichier doit √™tre au format Excel (.xlsx/.xls)"
            
            # Traitement des feuilles limit√©es
            limit_sheets_list = None
            if limit_sheets:
                limit_sheets_list = [s.strip() for s in limit_sheets.split(',')]
                print(f"üìä Feuilles limit√©es: {limit_sheets_list}")
            
            return self._compute_tva_officielle(
                file_attachment.file_path,
                start_date,
                end_date,
                limit_sheets_list
            )
            
        except Exception as e:
            logger.error(f"Erreur dans TVACollecteeOfficialTool: {e}")
            return f"‚ùå Erreur lors du calcul TVA officielle: {str(e)}"
    
    def _compute_tva_officielle(self, file_path: str, start_date: str, end_date: str, limit_sheets: Optional[List[str]]) -> str:
        """
        Calcul officiel : Œ£(Cr√©dits 445) - Œ£(D√©bits 445) sur p√©riode
        """
        
        print(f"üìä Loading Excel file: {file_path}")
        
        # Parse period
        start_dt = pd.to_datetime(start_date)
        end_dt = pd.to_datetime(end_date)
        
        # Lire toutes les feuilles Excel
        try:
            xls = pd.ExcelFile(file_path)
            target_sheets = limit_sheets or xls.sheet_names
            sheets_dict = {}
            for sh in target_sheets:
                try:
                    tmp = pd.read_excel(xls, sheet_name=sh)
                    sheets_dict[sh] = tmp
                    print(f"‚úÖ Loaded sheet '{sh}': {len(tmp)} rows √ó {len(tmp.columns)} cols")
                except Exception as e:
                    print(f"‚ö†Ô∏è Could not load sheet '{sh}': {e}")
                    continue
                    
        except Exception as e:
            return f"‚ùå Erreur lors de la lecture du fichier Excel: {str(e)}"
        
        by_sheet: List[Dict[str, Any]] = []
        all_445_rows: List[pd.DataFrame] = []
        
        for sheet_name, raw_df in sheets_dict.items():
            print(f"üîç Analyzing sheet: {sheet_name}")
            
            if raw_df is None or len(raw_df) == 0:
                by_sheet.append({"sheet": sheet_name, "status": "no_data"})
                print(f"‚ö†Ô∏è Sheet '{sheet_name}': no data")
                continue
            
            df = _normalize_columns(raw_df)
            
            account_col = _detect_col(df, COL_MAP["account"])
            date_col    = _detect_col(df, COL_MAP["date"])
            debit_col   = _detect_col(df, COL_MAP["debit"])
            credit_col  = _detect_col(df, COL_MAP["credit"])
            
            missing = [n for n, c in [
                ("compte", account_col), ("date", date_col), ("debit", debit_col), ("credit", credit_col)
            ] if c is None]
            
            if missing:
                by_sheet.append({
                    "sheet": sheet_name, "status": "missing_columns", "missing": missing
                })
                print(f"‚ùå Sheet '{sheet_name}': missing columns {missing}")
                continue
            
            df = _coerce_types(df, date_col, debit_col, credit_col)
            df = df[df[date_col].notna()]
            
            # R√àGLE D'OR: Filtrer uniquement les comptes 445 (TVA collect√©e)
            df_445 = df[_is_tva_account_series(df[account_col])]
            if df_445.empty:
                by_sheet.append({"sheet": sheet_name, "status": "no_445"})
                print(f"‚ö†Ô∏è Sheet '{sheet_name}': no 445 accounts found")
                continue
            
            print(f"‚úÖ Sheet '{sheet_name}': found {len(df_445)} entries with 445 accounts")
            
            # Filtrer sur la p√©riode
            df_445p = _filter_period(df_445, date_col, start_dt, end_dt)
            if df_445p.empty:
                by_sheet.append({"sheet": sheet_name, "status": "no_period_data"})
                print(f"‚ö†Ô∏è Sheet '{sheet_name}': no data in period {start_date} to {end_date}")
                continue
            
            print(f"‚úÖ Sheet '{sheet_name}': {len(df_445p)} entries in period")
            
            # Calcul officiel par feuille
            credits = float(df_445p[credit_col].sum())
            debits  = float(df_445p[debit_col].sum())
            tva_net = float(credits - debits)
            count   = int(len(df_445p))
            
            by_sheet.append({
                "sheet": sheet_name, "status": "ok",
                "tva_net": tva_net, "credits": credits, "debits": debits, "count": count
            })
            print(f"üìä Sheet '{sheet_name}': Cr√©dit={credits:.2f}, D√©bit={debits:.2f}, Net={tva_net:.2f}")
            
            # Pr√©parer pour agr√©gation globale
            chunk = df_445p[[account_col, credit_col, debit_col]].copy()
            chunk.columns = ["code_compte", "credit", "debit"]
            all_445_rows.append(chunk)
        
        # Agr√©gation finale
        if all_445_rows:
            big = pd.concat(all_445_rows, axis=0, ignore_index=True)
            big["credit"] = pd.to_numeric(big["credit"], errors="coerce").fillna(0.0)
            big["debit"]  = pd.to_numeric(big["debit"],  errors="coerce").fillna(0.0)
            
            credits_total = float(big["credit"].sum())
            debits_total  = float(big["debit"].sum())
            tva_total     = float(credits_total - debits_total)
            entries_count = int(len(big))
            
            # Top comptes 445
            by_acc = big.groupby("code_compte")[["credit", "debit"]].sum().reset_index()
            by_acc["net"] = by_acc["credit"] - by_acc["debit"]
            by_acc = by_acc.sort_values("net", ascending=False).head(10)
            
        else:
            credits_total = 0.0
            debits_total  = 0.0
            tva_total     = 0.0
            entries_count = 0
            by_acc = pd.DataFrame()
        
        # G√©n√©rer le rapport officiel
        rapport = self._generate_official_report(
            tva_total, credits_total, debits_total, entries_count,
            start_date, end_date, by_sheet, by_acc
        )
        
        return rapport
    
    def _generate_official_report(self, tva_total: float, credits_total: float, debits_total: float, 
                                entries_count: int, start_date: str, end_date: str,
                                by_sheet: List[Dict], by_acc: pd.DataFrame) -> str:
        """G√©n√®re le rapport officiel de TVA collect√©e"""
        
        rapport = f"=== TVA COLLECT√âE OFFICIELLE ===\n"
        rapport += f"P√©riode: {start_date} ‚Üí {end_date}\n"
        rapport += f"M√©thode: Œ£(Cr√©dits 445) ‚Äì Œ£(D√©bits 445)\n\n"
        
        # R√©sultats principaux
        rapport += f"üí∞ R√âSULTAT OFFICIEL:\n"
        rapport += f"‚Ä¢ TVA collect√©e nette: {tva_total:,.2f} MAD\n"
        rapport += f"‚Ä¢ Total cr√©dits 445: {credits_total:,.2f} MAD\n"
        rapport += f"‚Ä¢ Total d√©bits 445: {debits_total:,.2f} MAD\n"
        rapport += f"‚Ä¢ Nombre d'√©critures: {entries_count:,}\n\n"
        
        # D√©tail par feuille
        rapport += f"üìä D√âTAIL PAR FEUILLE:\n"
        sheets_ok = [s for s in by_sheet if s["status"] == "ok"]
        
        for sheet_info in sheets_ok:
            rapport += f"üîπ '{sheet_info['sheet']}':\n"
            rapport += f"    ‚Ä¢ Cr√©dits: {sheet_info['credits']:,.2f} MAD\n"
            rapport += f"    ‚Ä¢ D√©bits: {sheet_info['debits']:,.2f} MAD\n"
            rapport += f"    ‚Ä¢ Net: {sheet_info['tva_net']:,.2f} MAD\n"
            rapport += f"    ‚Ä¢ √âcritures: {sheet_info['count']:,}\n"
        
        # Feuilles probl√©matiques
        sheets_problems = [s for s in by_sheet if s["status"] != "ok"]
        if sheets_problems:
            rapport += f"\n‚ö†Ô∏è FEUILLES NON EXPLOITABLES:\n"
            for sheet_info in sheets_problems:
                status_msg = {
                    "no_data": "Aucune donn√©e",
                    "missing_columns": f"Colonnes manquantes: {', '.join(sheet_info.get('missing', []))}",
                    "no_445": "Aucun compte 445 trouv√©",
                    "no_period_data": "Aucune donn√©e sur la p√©riode"
                }
                rapport += f"‚Ä¢ '{sheet_info['sheet']}': {status_msg.get(sheet_info['status'], 'Erreur inconnue')}\n"
        
        # Top comptes 445
        if not by_acc.empty:
            rapport += f"\nüèÜ TOP COMPTES 445 (par contribution):\n"
            for _, row in by_acc.head(5).iterrows():
                rapport += f"‚Ä¢ {row['code_compte']}: {row['net']:,.2f} MAD (Cr: {row['credit']:,.2f}, Db: {row['debit']:,.2f})\n"
        
        # Notes de conformit√©
        rapport += f"\n‚úÖ CONFORMIT√â FISCALE:\n"
        rapport += f"‚Ä¢ M√©thode officielle respect√©e (comptes 445 uniquement)\n"
        rapport += f"‚Ä¢ Aucune reconstruction HT√ótaux effectu√©e\n"
        rapport += f"‚Ä¢ P√©riode filtr√©e avec pr√©cision\n"
        rapport += f"‚Ä¢ R√©sultat pr√™t pour d√©claration TVA\n"
        
        # Ligne pour d√©claration TVA
        rapport += f"\nüìã D√âCLARATION TVA:\n"
        rapport += f"‚Ä¢ Ligne 07 - TVA collect√©e: {tva_total:,.2f} MAD\n"
        
        # Notes d'utilisation avanc√©e
        rapport += f"\nüí° NOTES:\n"
        rapport += f"‚Ä¢ Pour r√©partition par taux/client: fournir export journal VE\n"
        rapport += f"‚Ä¢ Ce calcul est bas√© uniquement sur les comptes 445 du grand livre\n"
        rapport += f"‚Ä¢ Conforme aux normes comptables marocaines\n"
        
        return rapport