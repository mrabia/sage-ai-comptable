import os
import httpx
from langchain_openai import ChatOpenAI
from langchain_core.messages import HumanMessage, SystemMessage
from langchain.agents import AgentExecutor, create_openai_functions_agent
from langchain_core.prompts import ChatPromptTemplate, MessagesPlaceholder
from utils.tool_converter import convert_crewai_tools_to_langchain

try:
    print("‚úÖ Modern LangChain stack with AgentExecutor imported successfully")
except Exception as e:
    print(f"‚ùå Import error in sage_agent: {e}")

from src.tools.sage_tools import SAGE_TOOLS
from src.tools.document_tools import (
    DocumentAnalysisTool, InvoiceExtractionTool, ClientImportTool, 
    ProductImportTool, DocumentValidationTool
)

class SageAgentManager:
    """Gestionnaire des agents IA pour Sage Business Cloud Accounting"""
    
    def __init__(self):
        print("üîß Initializing SageAgentManager...")
        try:
            # Configuration du mod√®le LLM avec ChatOpenAI (programmer's approach + my error handling)
            self.llm = None
            self.agents_available = False
            
            # Modern LangChain 0.3.x configuration (expert's Option A)
            api_key = os.getenv("OPENAI_API_KEY")
            if not api_key:
                print("‚ö†Ô∏è OPENAI_API_KEY not found - AI agents will be unavailable")
                self.llm = None
            else:
                try:
                    base_url = os.getenv("OPENAI_API_BASE", "https://api.openai.com/v1")
                    proxy_url = (os.getenv("HTTPS_PROXY")
                                 or os.getenv("HTTP_PROXY")
                                 or os.getenv("ALL_PROXY"))
                    timeout_s = float(os.getenv("OPENAI_TIMEOUT_SECONDS", "30"))

                    # Modern httpx client with proper proxy configuration (httpx >=0.28.1)
                    if proxy_url:
                        # Use HTTPTransport with proxy (modern httpx 0.28+ pattern)
                        transport = httpx.HTTPTransport(proxy=proxy_url)
                        http_client = httpx.Client(transport=transport, timeout=timeout_s)
                    else:
                        http_client = httpx.Client(timeout=timeout_s)

                    self.llm = ChatOpenAI(
                        model=os.getenv("OPENAI_MODEL", "gpt-4o-mini"),
                        api_key=api_key,
                        base_url=base_url,
                        http_client=http_client,
                        temperature=0.1,
                        max_tokens=2000,
                    )
                    self.agents_available = True
                    print(f"‚úÖ Modern LLM configured (model={os.getenv('OPENAI_MODEL', 'gpt-4o-mini')}, base_url={base_url}, proxy={'yes' if proxy_url else 'no'})")
                    
                except Exception as e:
                    print(f"‚ùå Error configuring modern LLM: {e}")
                    self.llm = None
                    
        except Exception as e:
            print(f"‚ùå Error initializing SageAgentManager: {e}")
            self.llm = None
            self.agents_available = False
        
        # Initialiser les outils Sage (utiliser la liste existante)
        self.sage_tools = SAGE_TOOLS
        
        # Initialiser les outils de traitement de documents
        self.document_tools = [
            DocumentAnalysisTool(),
            InvoiceExtractionTool(),
            ClientImportTool(),
            ProductImportTool(),
            DocumentValidationTool()
        ]
        
        # Configurer les agents LangChain avec outils (Option A moderne)
        if self.agents_available:
            self.langchain_tools = self._convert_tools_to_langchain()
            self.agents = self._create_langchain_agents()
            print("‚úÖ Modern LangChain agents with tools configured successfully")
        else:
            self.langchain_tools = []
            self.agents = {}
            print("‚ùå AI agents not configured - LLM unavailable")
    
    def _convert_tools_to_langchain(self):
        """Convertit les outils CrewAI en outils LangChain compatibles"""
        try:
            all_tools = self.sage_tools + self.document_tools
            langchain_tools = convert_crewai_tools_to_langchain(all_tools)
            print(f"‚úÖ Converted {len(langchain_tools)} tools to LangChain format")
            return langchain_tools
        except Exception as e:
            print(f"‚ùå Error converting tools: {e}")
            return []
    
    def _create_langchain_agents(self):
        """Cr√©e les agents LangChain avec AgentExecutor"""
        if not self.llm or not self.langchain_tools:
            print("‚ùå Cannot create LangChain agents - missing LLM or tools")
            return {}
        
        try:
            agents = {}
            
            # Agent Comptable
            comptable_prompt = ChatPromptTemplate.from_messages([
                ("system", """Vous √™tes un assistant comptable expert avec une connaissance approfondie de Sage Business Cloud Accounting. 
                Vous excellez dans la gestion des clients, fournisseurs, factures, et produits. Vous savez √©galement analyser des documents 
                (factures PDF, images, fichiers CSV/Excel) pour extraire automatiquement les donn√©es comptables et les int√©grer dans Sage.
                
                Vos sp√©cialit√©s incluent:
                - Cr√©ation et gestion des fiches clients et fournisseurs
                - Saisie et traitement des factures
                - Gestion du catalogue produits
                - Analyse automatique de documents comptables
                - Import en masse de donn√©es depuis des fichiers
                - Validation et contr√¥le de coh√©rence des donn√©es
                
                IMPORTANT: Utilisez les outils Sage disponibles pour effectuer des actions r√©elles dans le syst√®me.
                
                Si la demande implique une CR√âATION, MODIFICATION ou SUPPRESSION dans Sage:
                - Pr√©parez le plan d'action d√©taill√©
                - Expliquez exactement ce que vous allez faire
                - Terminez par: "PLANNED_ACTION: [type:create_client/create_invoice/etc.] [description:d√©tails]"
                
                Pour les CONSULTATIONS (lister, afficher, rechercher), utilisez directement les outils Sage."""),
                MessagesPlaceholder(variable_name="chat_history", optional=True),
                ("human", "{input}"),
                MessagesPlaceholder(variable_name="agent_scratchpad"),
            ])
            
            comptable_agent = create_openai_functions_agent(self.llm, self.langchain_tools, comptable_prompt)
            agents['comptable'] = AgentExecutor(agent=comptable_agent, tools=self.langchain_tools, verbose=True)
            
            # Agent Analyste (version simplifi√©e avec les m√™mes outils)
            analyste_prompt = ChatPromptTemplate.from_messages([
                ("system", """Vous √™tes un analyste financier senior sp√©cialis√© dans l'interpr√©tation des donn√©es comptables de Sage Business Cloud Accounting.
                
                Vos comp√©tences incluent:
                - G√©n√©ration et analyse des bilans comptables
                - Cr√©ation de comptes de r√©sultat d√©taill√©s
                - Calcul et interpr√©tation des KPIs financiers
                - Recherche et analyse de transactions
                - Validation de la qualit√© des donn√©es extraites de documents
                
                IMPORTANT: Utilisez les outils Sage disponibles pour acc√©der aux donn√©es r√©elles."""),
                MessagesPlaceholder(variable_name="chat_history", optional=True),
                ("human", "{input}"),
                MessagesPlaceholder(variable_name="agent_scratchpad"),
            ])
            
            analyste_agent = create_openai_functions_agent(self.llm, self.langchain_tools, analyste_prompt)
            agents['analyste'] = AgentExecutor(agent=analyste_agent, tools=self.langchain_tools, verbose=True)
            
            # Agent Support
            support_prompt = ChatPromptTemplate.from_messages([
                ("system", """Vous √™tes un expert en support technique et formation pour Sage Business Cloud Accounting.
                
                Vos domaines d'expertise:
                - Formation et accompagnement des utilisateurs
                - R√©solution de probl√®mes techniques
                - Explication des fonctionnalit√©s Sage
                - Guide d'utilisation du traitement automatique de documents
                - Bonnes pratiques comptables et organisationnelles
                
                IMPORTANT: Utilisez les outils Sage disponibles pour d√©montrer les fonctionnalit√©s."""),
                MessagesPlaceholder(variable_name="chat_history", optional=True),
                ("human", "{input}"),
                MessagesPlaceholder(variable_name="agent_scratchpad"),
            ])
            
            support_agent = create_openai_functions_agent(self.llm, self.langchain_tools, support_prompt)
            agents['support'] = AgentExecutor(agent=support_agent, tools=self.langchain_tools, verbose=True)
            
            print(f"‚úÖ Created {len(agents)} LangChain agents with tools")
            return agents
            
        except Exception as e:
            print(f"‚ùå Error creating LangChain agents: {e}")
            return {}
    
    def _create_system_prompts(self):
        """Cr√©e les prompts syst√®me pour diff√©rents types d'agents (sans CrewAI)"""
        
        if not self.llm:
            print("‚ùå Cannot create system prompts - LLM not available")
            return {}
        
        try:
            # Prompt pour l'Assistant Comptable Expert
            comptable_prompt = """Vous √™tes un assistant comptable expert avec une connaissance approfondie de Sage Business Cloud Accounting. 
            Vous excellez dans la gestion des clients, fournisseurs, factures, et produits. Vous savez √©galement analyser des documents 
            (factures PDF, images, fichiers CSV/Excel) pour extraire automatiquement les donn√©es comptables et les int√©grer dans Sage.
            
            Vos sp√©cialit√©s incluent:
            - Cr√©ation et gestion des fiches clients et fournisseurs
            - Saisie et traitement des factures
            - Gestion du catalogue produits
            - Analyse automatique de documents comptables
            - Import en masse de donn√©es depuis des fichiers
                - Validation et contr√¥le de coh√©rence des donn√©es
                
                Vous communiquez de mani√®re claire et professionnelle, en expliquant chaque √©tape de vos actions.
                
                IMPORTANT: Utilisez les outils Sage disponibles pour effectuer des actions r√©elles dans le syst√®me."""
            
            # Prompt pour l'Analyste Financier Senior
            analyste_prompt = """Vous √™tes un analyste financier senior sp√©cialis√© dans l'interpr√©tation des donn√©es comptables de Sage Business Cloud Accounting.
                Vous excellez dans la production de rapports financiers, l'analyse de performance et la validation de donn√©es.
                
                Vos comp√©tences incluent:
                - G√©n√©ration et analyse des bilans comptables
                - Cr√©ation de comptes de r√©sultat d√©taill√©s
                - Calcul et interpr√©tation des KPIs financiers
                - Recherche et analyse de transactions
                - Validation de la qualit√© des donn√©es extraites de documents
                - D√©tection d'incoh√©rences et recommandations d'am√©lioration
                - Conseil en optimisation fiscale et gestion de la TVA
                
                Vous pr√©sentez vos analyses de mani√®re structur√©e avec des recommandations concr√®tes.
                
                IMPORTANT: Utilisez les outils Sage disponibles pour acc√©der aux donn√©es r√©elles."""
            
            # Prompt pour l'Expert Support Sage
            support_prompt = """Vous √™tes un expert en support technique et formation pour Sage Business Cloud Accounting.
                Vous aidez les utilisateurs √† comprendre et utiliser efficacement le syst√®me, y compris les nouvelles fonctionnalit√©s de traitement de documents.
                
                Vos domaines d'expertise:
                - Formation et accompagnement des utilisateurs
                - R√©solution de probl√®mes techniques
                - Explication des fonctionnalit√©s Sage
                - Guide d'utilisation du traitement automatique de documents
                - Bonnes pratiques comptables et organisationnelles
                - Optimisation des workflows
                - Assistance pour l'import et l'export de donn√©es
                
                Vous √™tes patient, p√©dagogue et vous adaptez vos explications au niveau de l'utilisateur.
                
                IMPORTANT: Utilisez les outils Sage disponibles pour d√©montrer les fonctionnalit√©s."""
            
            return {
                'comptable': comptable_prompt,
                'analyste': analyste_prompt,
                'support': support_prompt
            }
            
        except Exception as e:
            print(f"‚ùå Error creating system prompts: {e}")
            return {}
    
    def process_user_request(self, user_message: str, user_id: int = None, conversation_context: list = None) -> str:
        """Traite une demande utilisateur avec LangChain moderne (sans CrewAI)"""
        
        # Check if LLM is available
        if not self.agents_available or not self.llm:
            return "‚ùå L'agent IA n'est pas disponible. Veuillez v√©rifier que la cl√© OpenAI API est configur√©e."
        
        try:
            # R√©cup√©rer les credentials Sage de l'utilisateur
            sage_credentials = None
            if user_id:
                try:
                    from src.models.user import User
                    user = User.query.get(user_id)
                    if user and hasattr(user, 'sage_credentials_encrypted') and user.sage_credentials_encrypted:
                        sage_credentials = user.get_sage_credentials()
                except Exception as e:
                    print(f"Warning: Could not get user credentials: {e}")
            
            # Injecter les credentials dans les outils Sage
            if sage_credentials:
                try:
                    from src.tools.sage_tools import set_user_credentials
                    set_user_credentials(sage_credentials)
                except Exception as e:
                    print(f"Warning: Could not set Sage credentials: {e}")
            
            # Analyser le message pour d√©terminer l'agent appropri√©  
            agent_type = self._determine_agent_type(user_message)
            selected_agent = self.agents.get(agent_type)
            
            if not selected_agent:
                return f"‚ùå Agent '{agent_type}' non disponible."
            
            # Cr√©er le contexte de la t√¢che avec les credentials
            task_context = self._build_task_context(user_message, conversation_context, user_id, sage_credentials)
            
            # Construire l'input pour l'agent LangChain avec contexte
            agent_input = f"""Contexte utilisateur: {task_context}
            
            Demande: {user_message}
            
            Instructions:
            1. Analysez la demande de l'utilisateur
            2. Si la demande concerne un document (analyse, extraction, import), utilisez d'abord les outils de traitement de documents appropri√©s  
            3. Utilisez ensuite les outils Sage n√©cessaires pour r√©pondre √† la demande
            4. IMPORTANT: Si la demande implique une CR√âATION, MODIFICATION ou SUPPRESSION dans Sage (clients, factures, produits, etc.), 
               NE PAS ex√©cuter l'action imm√©diatement. Au lieu de cela:
               - Pr√©parez le plan d'action d√©taill√©
               - Expliquez exactement ce que vous allez faire
               - Terminez par: "PLANNED_ACTION: [type:create_client/create_invoice/etc.] [description:d√©tails de l'action]"
            5. Pour les CONSULTATIONS (lister, afficher, rechercher), utilisez directement les outils Sage sans demander confirmation
            6. Fournissez une r√©ponse compl√®te et professionnelle
            7. Si vous analysez des documents, fournissez un r√©sum√© des donn√©es extraites et leur qualit√©
            
            R√©pondez de mani√®re claire et structur√©e en fran√ßais.
            """
            
            # Ex√©cuter l'agent LangChain avec les outils
            result = selected_agent.invoke({
                "input": agent_input,
                "chat_history": []  # Peut √™tre √©tendu pour inclure l'historique
            })
            
            result_str = result.get('output', str(result))
            
            # Check if the agent planned an action instead of executing it
            if "PLANNED_ACTION:" in result_str:
                return self.parse_planned_action(result_str)
            
            return result_str
            
        except Exception as e:
            error_msg = f"Erreur lors du traitement de votre demande: {str(e)}. Veuillez r√©essayer ou reformuler votre question."
            print(f"‚ùå Error in process_user_request: {e}")
            return error_msg
    
    def _determine_agent_type(self, user_message: str) -> str:
        """D√©termine quel agent utiliser selon le message"""
        message_lower = user_message.lower()
        
        # Mots-cl√©s pour l'agent comptable (op√©rations + documents)
        comptable_keywords = [
            'cr√©er', 'ajouter', 'nouveau', 'client', 'facture', 'produit', 'fournisseur',
            'saisir', 'enregistrer', 'modifier', 'supprimer', 'import', 'importer',
            'document', 'pdf', 'csv', 'excel', 'fichier', 'analyser', 'extraire',
            'upload', 't√©l√©charger', 'scanner', 'ocr'
        ]
        
        # Mots-cl√©s pour l'analyste financier (rapports + validation)
        analyste_keywords = [
            'bilan', 'compte de r√©sultat', 'rapport', 'analyse', 'kpi', 'performance',
            'chiffre d\'affaires', 'b√©n√©fice', 'perte', 'marge', 'rentabilit√©',
            'transaction', 'recherche', 'historique', 'valider', 'validation',
            'v√©rifier', 'contr√¥le', 'coh√©rence', 'qualit√©'
        ]
        
        # Mots-cl√©s pour le support (aide + formation)
        support_keywords = [
            'aide', 'comment', 'expliquer', 'formation', 'apprendre', 'tutoriel',
            'probl√®me', 'erreur', 'bug', 'ne fonctionne pas', 'assistance',
            'guide', 'proc√©dure', '√©tapes', 'configuration'
        ]
        
        # Compter les correspondances
        comptable_score = sum(1 for keyword in comptable_keywords if keyword in message_lower)
        analyste_score = sum(1 for keyword in analyste_keywords if keyword in message_lower)
        support_score = sum(1 for keyword in support_keywords if keyword in message_lower)
        
        # D√©terminer l'agent avec le score le plus √©lev√©
        if comptable_score >= analyste_score and comptable_score >= support_score:
            return 'comptable'
        elif analyste_score >= support_score:
            return 'analyste'
        else:
            return 'support'
    
    def _build_task_context(self, user_message: str, conversation_context: list = None, user_id: int = None, sage_credentials: dict = None) -> str:
        """Construit le contexte pour la t√¢che de l'agent"""
        context_parts = []
        
        # Ajouter les credentials Sage si disponibles
        if sage_credentials:
            context_parts.append("‚úÖ CONNEXION SAGE ACTIVE - Vous √™tes connect√© √† Sage Business Cloud Accounting")
            context_parts.append("üîß OUTILS DISPONIBLES - Utilisez directement les outils Sage (get_customers, create_invoice, get_balance_sheet, etc.) sans demander d'identifiants")
            context_parts.append("üìã INSTRUCTIONS - R√©pondez directement aux demandes en utilisant les outils Sage appropri√©s")
        else:
            context_parts.append("‚ö†Ô∏è Aucune connexion Sage d√©tect√©e - Demander √† l'utilisateur de se connecter √† Sage d'abord")
        
        if user_id:
            context_parts.append(f"Utilisateur ID: {user_id}")
        
        if conversation_context:
            # Prendre les 3 derniers √©changes pour le contexte
            recent_context = conversation_context[-6:] if len(conversation_context) > 6 else conversation_context
            context_parts.append("Contexte de conversation r√©cent:")
            for msg in recent_context:
                role = "Utilisateur" if msg.get('role') == 'user' else "Assistant"
                content = msg.get('content', '')[:200] + "..." if len(msg.get('content', '')) > 200 else msg.get('content', '')
                context_parts.append(f"- {role}: {content}")
        
        return "\n".join(context_parts) if context_parts else "Nouvelle conversation"
    
    def get_agent_capabilities(self) -> dict:
        """Retourne les capacit√©s de chaque agent"""
        if not self.agents_available:
            return {
                'status': 'unavailable',
                'message': 'AI agents not available - check OpenAI API key and dependencies',
                'comptable': {'tools': 0},
                'analyste': {'tools': 0},
                'support': {'tools': 0}
            }
        
        return {
            'status': 'available',
            'comptable': {
                'description': 'Assistant Comptable Expert',
                'capabilities': [
                    'Gestion des clients et fournisseurs',
                    'Cr√©ation et traitement des factures',
                    'Gestion du catalogue produits',
                    'Analyse automatique de documents (PDF, images, CSV, Excel)',
                    'Extraction de donn√©es de factures',
                    'Import en masse de clients et produits',
                    'Validation et contr√¥le de donn√©es'
                ],
                'tools': len(self.sage_tools + self.document_tools) if self.agents else 0
            },
            'analyste': {
                'description': 'Analyste Financier Senior',
                'capabilities': [
                    'G√©n√©ration de bilans comptables',
                    'Cr√©ation de comptes de r√©sultat',
                    'Calcul de KPIs financiers',
                    'Recherche et analyse de transactions',
                    'Validation de qualit√© des donn√©es extraites',
                    'Recommandations financi√®res'
                ],
                'tools': (len(self.sage_tools) + 2) if self.agents else 0
            },
            'support': {
                'description': 'Expert Support Sage',
                'capabilities': [
                    'Formation et accompagnement utilisateurs',
                    'R√©solution de probl√®mes techniques',
                    'Guide d\'utilisation des fonctionnalit√©s',
                    'Assistance traitement de documents',
                    'Bonnes pratiques comptables',
                    'Optimisation des workflows'
                ],
                'tools': 5 if self.agents else 0
            }
        }
    
    def is_available(self) -> bool:
        """Check if agents are available"""
        return self.agents_available and len(self.agents) > 0
    
    def parse_planned_action(self, result_str: str) -> dict:
        """Parse the agent response to extract planned action details"""
        import re
        
        # Find the PLANNED_ACTION marker
        action_match = re.search(r'PLANNED_ACTION:\s*\[type:(.*?)\]\s*\[description:(.*?)\]', result_str)
        
        if action_match:
            action_type = action_match.group(1).strip()
            action_description = action_match.group(2).strip()
            
            # Extract the main response (everything before PLANNED_ACTION)
            main_response = result_str.split('PLANNED_ACTION:')[0].strip()
            
            # Extract details if possible
            details = self.extract_action_details(main_response, action_type)
            
            return {
                'response': main_response,
                'agent_type': 'comptable_with_confirmation',
                'capabilities_used': ['analysis', 'sage_planning'],
                'success': True,
                'planned_action': {
                    'type': action_type,
                    'description': action_description,
                    'details': details
                }
            }
        
        # Fallback if parsing fails
        return {
            'response': result_str,
            'agent_type': 'comptable',
            'capabilities_used': ['analysis'],
            'success': True
        }
    
    def extract_action_details(self, response: str, action_type: str) -> dict:
        """Extract specific details from the agent response based on action type"""
        details = {}
        
        response_lower = response.lower()
        
        # Extract client details
        if 'client' in action_type:
            if 'nom' in response_lower or 'client' in response_lower:
                # Try to extract client name
                import re
                name_patterns = [
                    r'client[:\s]*([^\n]+)',
                    r'nom[:\s]*([^\n]+)',
                    r'pour\s+([A-Za-z\s]+)',
                ]
                for pattern in name_patterns:
                    match = re.search(pattern, response, re.IGNORECASE)
                    if match:
                        details['client_name'] = match.group(1).strip()
                        break
        
        # Extract invoice details
        elif 'invoice' in action_type or 'facture' in action_type:
            import re
            # Extract amounts
            amount_match = re.search(r'(\d+(?:,\d+)?(?:\.\d+)?)\s*‚Ç¨', response)
            if amount_match:
                details['amount'] = amount_match.group(1)
            
            # Extract client for invoice
            client_patterns = [
                r'pour\s+([A-Za-z\s]+)',
                r'client[:\s]*([^\n]+)',
            ]
            for pattern in client_patterns:
                match = re.search(pattern, response, re.IGNORECASE)
                if match:
                    details['client_name'] = match.group(1).strip()
                    break
        
        # Extract product details
        elif 'product' in action_type or 'produit' in action_type:
            import re
            # Extract product name
            prod_patterns = [
                r'produit[:\s]*([^\n]+)',
                r'nom[:\s]*([^\n]+)',
            ]
            for pattern in prod_patterns:
                match = re.search(pattern, response, re.IGNORECASE)
                if match:
                    details['product_name'] = match.group(1).strip()
                    break
            
            # Extract price
            price_match = re.search(r'prix[:\s]*(\d+(?:,\d+)?(?:\.\d+)?)\s*‚Ç¨', response, re.IGNORECASE)
            if price_match:
                details['price'] = price_match.group(1)
        
        return details

# Classe de compatibilit√© pour l'ancien code
class SageAccountingAgent:
    """Classe de compatibilit√© pour l'ancien code"""
    
    def __init__(self):
        self.manager = SageAgentManager()
    
    def execute_task(self, user_message: str, credentials: dict, business_id: str = None, agent_type: str = "accounting") -> str:
        """M√©thode de compatibilit√©"""
        return self.manager.process_user_request(user_message)
    
    def get_agent_capabilities(self) -> dict:
        """M√©thode de compatibilit√©"""
        return self.manager.get_agent_capabilities()
    
    def determine_agent_type(self, user_message: str) -> str:
        """M√©thode de compatibilit√©"""
        return self.manager._determine_agent_type(user_message)
    
    def is_available(self) -> bool:
        """Check if agents are available"""
        return self.manager.is_available()